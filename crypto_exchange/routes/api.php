<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
  |--------------------------------------------------------------------------
  | API Routes
  |--------------------------------------------------------------------------
  |
  | Here is where you can register API routes for your application. These
  | routes are loaded by the RouteServiceProvider within a group which
  | is assigned the "api" middleware group. Enjoy building your API!
  |
 */

// Префикс конечной точки API версии 1
$endPointV1 = 'v1';

// Группа маршрутов API. Версия 1
Route::prefix($endPointV1)->middleware(['check.auth.token', 'handle.api.response'])->group(function () {

    // Статус - тест доступности API
    Route::get('status', function () {
        return 'OK';
    });
    //
    // Примечание:
    // для тестирования (с отправкой заголовков авторизации) API можно использовать консольную утилиту Curl:
    // 
    // Метод GET:
    // curl -v -H 'Authorization: Bearer YOUR-TOKEN' http:/app-url/api/v1/rates
    // где:
    // YOUR-TOKEN - токен, указанный в .env
    // http:/app-url/api/v1/rates - URL- адрес метода API приложения
    // 
    // Метод POST:
    // curl -v -H 'Authorization: Bearer YOUR-TOKEN' -d 'currency_from=BTC&currency_to=EUR&value=1' http:/app-url/api/v1/convert
    // где:
    // YOUR-TOKEN - токен, указанный в .env
    // currency_from=BTC&currency_to=EUR&value=1 - параметры запроса
    // http:/app-url/api/v1/convert - URL- адрес метода API приложения
    // 
    //
    //
    // В ТЗ указано:
    // В случае ошибки связанной с токеном: код ответа должен быть 403, в случае успеха код ответа 200 + данные
    // В то же время, в ТЗ для второго метода API (convert: Запрос на обмен валюты c учетом комиссии) указано:
    // В случае ошибки:
    // {
    //     “status”: “error”,
    //	   “code”: 403,
    //	   “message”: “Invalid token”
    // }
    // Поэтому было решено, что разумнее будет,
    // если в случае ошибки все метды будут отдавать ответ в одном формате.
    // Хотя можно использовать примерно такой подход:
    // abort(403, 'Invalid token');
    // Но в этом случае, в ответе будет отдана html-страница (для ошибки 403)
    // Правильнее, если API будет отдавать отдавать ответ в JSON.
    // Итак, формат ответа ВСЕХ методов API при возникновении ошибки:
    // {
    //     "status": "error",
    //	   "code": http - код ошибки, например: 403,
    //	   "message": сообщение об ошибке, например: Invalid token
    // }
    //
    //
    // Метод API. Версия 1
    // Получение всех курсов с учетом комиссии.
    // Внимание! По ТЗ у нас базовая валюта для всех случаев - BTC
    // URL: GET rates
    // Внимание! В ТЗ требуемый формат ответа указан такой:
    // Формат ответа по ТЗ:
    // {
    //     Код_котируемой_валюты: курс,
    //     ...
    // }
    // Здесь не совсем понятно, что за курс - на покупку или на продажу.
    // Опять же, согласно ТЗ, курс в ответе должен быть указан с учётом комиссии,
    // из этого следует, что курсы на покупку и на продажу будут разными в любом случае
    // Исходя из этого, мы немного изменим формат ответа, он будет такой:
    // Формат ответа, принятый в проекте:
    // {
    //     Код_котируемой_валюты: {"buy":"курс покупки","sell":"курс продажи"},
    //     ...
    // }
    //
    // Сортировка от меньшего курса к большему курсу.
    // В качестве параметров может передаваться интересующая валюта:
    //
    // rates?filter[currency]=USD
    //
    // В этом случае, отдаем указанные в качестве параметра currency значения.
    Route::get('rates', 'ApiV1Controller@getRates');

    // Метод API. Версия 1
    // Запрос на конвертацию валют, результат запроса сохранять в базу.
    // URL: POST convert
    // Параметры запроса:
    // currency_from: USD // исходная валюта
    // currency_to: BTC // валюта в которую конвертируем
    // value: 1.00 // количество единиц исходной валюты
    //
    // Формат ответа:
    // {
    //     "currency_from": код исходной валюты,
    //     "currency_to": код валюты, в которую конвертируем,
    //     "value": объём исходной валюты,
    //     "converted_value": объём валюты, в которую конвертируем,
    //     "rate": курс,
    //     "created_at": TIMESTAMP
    // }
    Route::post('convert', 'ApiV1Controller@convert');
});
